package Main;

import javafx.application.Application;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

import java.util.Random;

// INTRODUCTION
// This project was to create GUI for the simple guessing game many beginners start programming.
// I've built the entire program in a single file to simplify certain programming concepts.
// Understand that this is NOT a perfect implementation of the game, but an implementation
// that I felt both, presented a good amount of features/techniques, as well as was easier to
// follow than certain 'Best Practices'. With that said,



// HOW TO PLAY:
// The goal of the game is to guess a hidden number randomly generated by the computer. With each
// guess, the program provides 2 different types of feedback to the user, too high of a guess or
// too low. The user uses the feedback to narrow down the search until the user either guesses the
// hidden number or runs out of guesses. Optimal play is an implementation of the 'Binary Search'
// algorithm. To play optimally you would continuously guess the number exactly in the middle of
// the high and low value. This essentially cuts the interval you need to search in half. If you
// wanted to look for a random number between 1 and 100 then you could guess 50. Now you know that
// the number is either from 50 - 100, 1 - 50, or was 50. Either way by continuously guessing the
// middle number using the feedback from the program we can guarantee a win in log2(n) moves where
// n is the size of the interval.



// CODE EXPLANATION
// I plan on going over all of the code extensively in this file from the top line all the way to
// the bottom. Since this will be the 'Beginner' level GUI program I will talk more about the
// Java programming language and less about object oriented design. If you can get through
// this file with a basic understanding of what is going on, I highly encourage you to check out
// my other example 'TicTacToe'. Additionally, I can only go so far in depth with my explanations
// so just know that each topic will have more to it than what I go over and anyone reading this is
// encouraged to go online for more information about specifics.
//
// PACKAGES, CLASSES, AND IMPORTS
// To begin you will notice a 'package Main' at the top of the file
// Java programs are very modular and are organized into classes. An individual class will accomplish
// a certain task and you could then conceive of multiple classes that are very similar in function.
// For example, if you had a classes that each implemented a single GUI component like Buttons, Labels,
// Lists, etc, you might want to wrap all of those up into a single container. That container is called
// a package and a Java program can have many or no packages inside it. Here the 'Main' package is
// superfluous since there is only a single class inside of it and nothing else but I included it to
// show what it is. Next you will see a list of imports. If you are familiar in the C programming language
// than you can think of import statements as #include statements. It is Javas way of including external
// libraries in the form of packages and classes into our program for use. When building a GUI you will
// naturally be importing many classes and so it's not uncommon to have a bunch of imports. If you knew
// you were planning on using many different classes I could just do something like this 'import javafx.*;'
// which would include every single class inside the javaFX package. That would be wasteful and any good
// Integrated Development Environment (IDE) will handle importing the specific classes you use automatically.
//
// Going down to our class declaration you can see we created a single class called 'guessingGame' and it has
// the 'public' access modifier in front of it. I don't want to focus too much on the access modifiers because
// that is more of an object oriented concept that I talk about in the 'TicTacToe' project, but it is necessary
// in this case for the application to be built. Next you can see that this new class 'guessingGame' extends
// Application. Again, extends is an OOP concept that I talk about in depth in the TicTacToe project so for now
// we will just say that Application is a special type of class that contains all of the necessary functionality
// for creating the GUI behind the scenes. When we say our class extends Application we are basically telling
// Java to make our class an application and we will specify the details later.
//
// If you are coming from a C background than what you need to know about classes is that they contain 2 main
// things, member variables, and methods. Methods are essentially just functions and member variables are just
// variables outside those methods that can be accessed and sometimes modified by the methods in the class.
// Similarly to C, I will create all the member variables at the top of the class and write the mthods below.

public class guessingGame extends Application
{
    
    final Integer maxGuesses = 13;
    final Integer upperBound = 10000;
    final Integer lowerBound = 1;

    final boolean cheatMode = true;

    Label lowerBoundLabel = new Label();
    Label upperBoundLabel = new Label();
    Label guessesLabel = new Label();
    Label guessResponseLabel = new Label();
    Label cheatLabel = new Label("Cheat: 5000");

    TextField inputField = new TextField();

    SimpleIntegerProperty guessesLeft = new SimpleIntegerProperty();
    SimpleIntegerProperty currentUpperBound = new SimpleIntegerProperty();
    SimpleIntegerProperty currentLowerBound = new SimpleIntegerProperty();
    Random rnd = new Random();
    Integer answer;

    boolean gameOver;

    public void start(Stage window)
    {
        initializeGame();

        window.setTitle("Guessing Game");
        window.setHeight(460);
        window.setWidth(500);

        BorderPane mainLayout = new BorderPane();
        mainLayout.setPadding(new Insets(20,10,20,10));

        mainLayout.setTop(getTopContainer());
        mainLayout.setCenter(getCenterContainer(window));

        Scene scene = new Scene(mainLayout);
        window.setScene(scene);
        mainLayout.requestFocus();
        window.show();
    }

    public static void main(String[] args)
    {
        launch(args);
    }

    void initializeGame()
    {
        answer = rnd.nextInt(upperBound)+lowerBound;
        currentUpperBound.setValue(upperBound);
        currentLowerBound.setValue(lowerBound);
        guessesLeft.setValue(maxGuesses);
        gameOver = false;

        lowerBoundLabel.textProperty().bind(currentLowerBound.asString());
        upperBoundLabel.textProperty().bind(currentUpperBound.asString());
        guessesLabel.textProperty().bind(guessesLeft.asString());
    }

    VBox getTopContainer()
    {
        VBox headerContainer = new VBox(40);
        headerContainer.setAlignment(Pos.CENTER);

        Label header = new Label("Guessing Game");
        Label desc1 = new Label("Enter a number between");
        Label desc2 = new Label("and");
        Label desc3 = new Label("Guesses Left:");


        header.setStyle("-fx-font-size: 28; -fx-text-fill: BLUE");
        lowerBoundLabel.setStyle("-fx-font-size: 20; -fx-text-fill: GREEN");
        upperBoundLabel.setStyle("-fx-font-size: 20; -fx-text-fill: GREEN");
        desc1.setStyle("-fx-font-size: 18; -fx-text-fill: #243556");
        desc2.setStyle("-fx-font-size: 18; -fx-text-fill: #243556");
        desc3.setStyle("-fx-font-size: 16; -fx-text-fill: BLUE");
        guessesLabel.setStyle("-fx-font-size: 16; -fx-text-fill: PURPLE");
        cheatLabel.setStyle("-fx-font-size: 16; -fx-text-fill: steelblue");

        HBox guessesLeftContainer = new HBox(10);
        guessesLeftContainer.setAlignment(Pos.CENTER);

        guessesLeftContainer.getChildren().addAll(desc3, guessesLabel);

        HBox descriptionContainer = new HBox(10);
        descriptionContainer.setAlignment(Pos.CENTER);

        descriptionContainer.getChildren().addAll(desc1,lowerBoundLabel, desc2, upperBoundLabel);

        headerContainer.getChildren().addAll(header,descriptionContainer, guessResponseLabel,guessesLeftContainer);

        if(cheatMode)
        {
            headerContainer.getChildren().add(cheatLabel);
        }

        return headerContainer;
    }

    VBox getCenterContainer(Stage window)
    {
        VBox mainContainer = new VBox(40);
        mainContainer.setAlignment(Pos.CENTER);

        HBox buttonBox = new HBox(20);
        buttonBox.setAlignment(Pos.CENTER);

        Button closeButton = new Button("Close");
        Button guessButton = new Button("Guess");
        Button newGameButton = new Button("New Game");

        inputField.setPromptText("Guess A Number");
        inputField.setMaxWidth(122);
        inputField.setOnKeyPressed(ke -> {
            if (ke.getCode().equals(KeyCode.ENTER))
            {
                guessNum(inputField.getText());
            }
        });

        closeButton.setOnAction(e -> window.close());
        guessButton.setOnAction(e -> guessNum(inputField.getText()));
        newGameButton.setOnAction(e -> newGame());

        buttonBox.getChildren().addAll(newGameButton,guessButton,closeButton);

        mainContainer.getChildren().addAll(inputField,buttonBox);

        return mainContainer;
    }

    void newGame()
    {
        gameOver = false;
        guessesLeft.set(maxGuesses);
        currentLowerBound.set(lowerBound);
        currentUpperBound.set(upperBound);
        answer = rnd.nextInt(upperBound)+lowerBound;
        guessResponseLabel.setText("");
        cheatLabel.setText("Cheat: 5000");
    }

    boolean sanitizeInput(String input)
    {
        int guess;

        try
        {
            guess = Integer.parseInt(input);
        }
        catch (NumberFormatException e)
        {
            guessResponseLabel.setText("Input was not a number");
            guessResponseLabel.setStyle("-fx-font-size: 18; -fx-text-fill: RED");

            return false;
        }

        if(guess > currentUpperBound.get() || guess < currentLowerBound.get())
        {
            guessResponseLabel.setText("Please Enter a number between the two bounds");
            guessResponseLabel.setStyle("-fx-font-size: 18; -fx-text-fill: RED");

            return false;
        }

        return true;
    }

    void setCheat()
    {
        int cheatNum = (currentUpperBound.get()-currentLowerBound.get())/2 + currentLowerBound.get();

        cheatLabel.setText("Cheat: " + cheatNum);
    }


    void guessNum(String raw)
    {
        if(gameOver)
        {
            return;
        }

        inputField.clear();

        if(!sanitizeInput(raw))
        {
            return;
        }

        int guess = Integer.parseInt(raw);

        guessesLeft.set(guessesLeft.get()-1);

        if(guessesLeft.get() < 1 && guess != answer)
        {
            guessResponseLabel.setText("You didn't guess it :(\nThe number was: " + answer);
            guessResponseLabel.setStyle("-fx-font-size: 18; -fx-text-fill: RED");

            gameOver = true;

            return;
        }

        if(guess > answer)
        {
            guessResponseLabel.setText("Guess was too high!");
            guessResponseLabel.setStyle("-fx-font-size: 18; -fx-text-fill: ORANGE");
            currentUpperBound.set(guess);
            setCheat();
        }
        else if(guess < answer)
        {
            guessResponseLabel.setText("Guess was too low!");
            guessResponseLabel.setStyle("-fx-font-size: 18; -fx-text-fill: #1f8ece");
            currentLowerBound.set(guess);
            setCheat();
        }
        else
        {
            guessResponseLabel.setText("You guessed it!!\nThe number was: " + answer);
            guessResponseLabel.setStyle("-fx-font-size: 18; -fx-text-fill: GREEN");

            gameOver = true;
        }

    }
}